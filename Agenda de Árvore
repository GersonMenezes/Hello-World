#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Data{
  int chave;
  char nome[24];
  }data;

struct node{
  data inf;
  struct node *left, *right;
  };
    
int menu(struct node **treehead);
void search(data *ficha,struct node* p);
void push(data new, struct node **p);
void pop(data guy, struct node **p);
void AntecessorR(struct node *q, struct node **r);
void AntecessorL(struct node *q, struct node **r);
//void empty(node* *p);

int main(){

	int x = 1;
    struct node *treehead =(struct node*) malloc(sizeof(struct node));
    treehead = NULL;
   
    while(x!=0){
      x = menu(&treehead);
   }
 return 0;
 }
 
 int menu(struct node **treehead){
  int y;
  data chosen;
  printf("Diga a opcao desejada:\n\n0 para sair\n1 para adicionar\n2 para retirar\n3 para listar\n4 para buscar\n5 para limpar\n\n");
  scanf("%d", &y);
    
    switch (y){
      case 0:
        return 0;
        break;
      case 1:
        printf("Tell the number person to be add: \n");
        scanf("%d", &(chosen.chave));
        push(chosen, &(*treehead));
        break;
      case 2:
        printf("Tell the name to remove: \n");
        scanf("%d", &(chosen.chave));
        pop(chosen, &(*treehead));
        break;
     /* case 3:
        list();
        break;*/
      case 4:
        printf("Tell the number people to remove: \n"); 
        scanf("%d", &(chosen.chave));
        search(&chosen, *treehead);
        break;
      /*case 5:
        clear();
        break;*/
      default:
          printf("Do not exist this option");
      }
      return 1;
 }
/*int empty(pointer *p){
	if (*p == NULL)
	return 1;
	else
	return 0;
}*/
	
void push(data new, struct node **p){

  if (*p == NULL){
    *p = (struct node*) malloc(sizeof(struct node));
    (*p)->inf = new;
    (*p)->right = NULL; (*p)->left = NULL;
     if(*p != NULL){
        	printf("Record added with sucess...\n\n");
		}
	return;
    }
  if (new.chave < (*p)->inf.chave){
    	push(new, &(*p)->left);
    	return;
    }
  if (new.chave > (*p)->inf.chave){
    	push(new, &(*p)->right);
    	return;
    }
  else
      printf("This person is already in the database\n\n");
}

void pop(data guy, struct node **p){

    struct node *aux;
    if(*p == NULL){
    printf("Empty list");
    return;
  }
    if(guy.chave < (*p)->inf.chave){
      pop(guy, &(*p)->left);
      return;
  }
    if(guy.chave > (*p)->inf.chave){
      pop(guy, &(*p)->right);
      return;
  }								//agora foi achado o node a se apagado
    if((*p)->right == NULL){   // Se o lado direito for NULL, basta indexar o que tem à esquerda para o ponteiro que aponta para o nodo a ser apagado...
      aux = *p;
      *p = (*p)->left;
      free(aux);
      return;
   }
	if ((*p)->left != NULL){  // Mas se o nodo da direita não é NULL então pega-se o mais a direita do da esquerda a ser apagado...
      AntecessorL(*p, &(*p)->left);
      return;
   }
    if ((*p)->left == NULL){  // Se o lado esquerdo for NULL, basta indexar o que tem à direita para o ponteiro que aponta para nodo a ser apagado
    	aux = *p;
    	*p = (*p)->right;
    	free(aux);
    	return;	
   }
   if ((*p)->right != NULL){  // Mas se o nodo da esquerda não é NULL então pega-se o mais a esquerda do da direita a ser apagado...
      AntecessorR(*p, &(*p)->right);
      return;
	}
 }
 
 void AntecessorL(struct node *q, struct node **r) {
	struct node *aux;
	if ((*r)->right != NULL) {
		Antecessor(q, &(*r)->right);
		return;	
	}	
	q->inf = (*r)->inf;
	aux = *r;
	*r = (*r)->left;
	free(aux);
}
 void AntecessorR(struct node* q, struct node **r) {
	struct node *aux;
	if ((*r)->left != NULL) {
		Antecessor(q, &(*r)->left);
		return;	
	}	
	q->inf = (*r)->inf;
	aux = *r;
	*r = (*r)->right;
	free(aux);
}
 
void search(data *ficha, struct node* p){

  if(p == NULL){
    printf("No data to show\n");
    return;
  }
  if(ficha->chave > p->inf.chave){
    search(ficha, p->right);
    return;
  }
  if(ficha->chave < p->inf.chave){
    search(ficha, p->left);
    return;
  }
  else{
    *ficha = p->inf;}
}
